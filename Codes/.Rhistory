population <- rbeta (100000, 1, 2)
plot (density (population))
# population mean
mean(population)
# population variance
var(population)
survey = sample(population, size = 1000)
plot (density (survey))
# sample mean as estimator of population mean
est.mean = mean(survey)
# unbiased estimator of population variance
est.var = 1000/(1000-1) * var(survey)
est.var
population <- rbeta (100000, 1, 2)
plot (density (population))
# population mean
mean(population)
# population variance
var(population)
head(population)
plot (density (population))
# population mean
mean(population)
# population variance
var(population)
survey = sample(population, size = 1000)
length(survey)
plot (density (survey))
plot (density (survey))
plot (density (survey))
plot (density (population))
est.mean = mean(survey)
est.mean
est.mean = mean(survey)
mean(population)
est.meanlist <- c()
for (i in 1:100){
survey = sample(population, size = 1000)
est.meanlist <- c(est.meanlist, mean(survey))
}
est.meanlist
mean(est.meanlist)
mean(population)
survey_mean_list  <- c()
survey_times <- seq(100, 100000, 500)
for (n in survey_times ){
survey <- sample(population, size = n, replace = F)
survey_mean_list  <- c(survey_mean_list , mean(survey))
}
plot(survey_times, survey_mean_list , xlab = "number of samples", ylab = "sample mean")
abline(h = mean(population), col = "red")
survey_times <- seq(100, 100000, 500)
survey_times <- seq(100, 100000, 500)
head(survey_times)
survey_mean_list  <- c()
survey_times <- seq(100, 100000, 500)
for (n in survey_times ){
survey <- sample(population, size = n, replace = F)
survey_mean_list  <- c(survey_mean_list , mean(survey))
}
plot(survey_times, survey_mean_list , xlab = "number of samples", ylab = "sample mean")
abline(h = mean(population), col = "red")
est.meanlist <- c()
for (i in 1:100){
survey = sample(population, size = 1000)
est.meanlist <- c(est.meanlist, mean(survey))
}
mean(est.meanlist)
plot(est.meanlist)
plot(density(est.meanlist))
est.meanlist <- c()
for (i in 1:1000){
survey = sample(population, size = 1000)
est.meanlist <- c(est.meanlist, mean(survey))
}
mean(est.meanlist)
plot(density(est.meanlist))
print (length(sample))
bootstrap_means = c() # store bootstrapped means
for (i in 1:1000){
# resample from the sample with replacement
boot_data <- sample(survey, length(survey), replace = T)
boot_mean <- mean(boot_data)
bootstrap_means <- c(bootstrap_means, boot_mean)
}
# then simple quantile function to
print ("point estimate of mean")
print (sample_mean)
sample <- sample(population, n = 5000)
sample <- sample(population, 5000)
length(sample)
plot(density(sample))
survey <- sample(population, 5000)
print (length(survey))
survey <- sample(population, 5000)
print (length(survey))
boot_data <- sample(survey, length(survey), replace = T)
length(boot_data)
boot_mean <- mean(boot_data)
bootstrap_means <- c(bootstrap_means, boot_mean)
for (i in 1:1000){
# resample from the sample with replacement
boot_data <- sample(survey, length(survey), replace = T)
boot_mean <- mean(boot_data)
bootstrap_means <- c(bootstrap_means, boot_mean)
}
dim(bootstrap_means)
length(bootstrap_means)
# then simple quantile function to
print ("point estimate of mean")
print (mean(bootstrap_means))
plot(density(bootstrap_means))
conf = quantile(bootstrap_means, c(0.025, 0.975))
conf
library(carData)
data (WVS)
head(WVS)
ordered_logit <- polr(poverty~religion+degree+country+age+gender, data = WVS, Hess = TRUE)
# load some required packages
library(ggplot2)
library(margins)
library(ISLR)
library(broom)
library(lmtest)
data(Wage)
library(carData)
data (WVS)
head(WVS)
ordered_logit <- polr(poverty~religion+degree+country+age+gender, data = WVS, Hess = TRUE)
library(MASS)
library(carData)
data (WVS)
head(WVS)
ordered_logit <- polr(poverty~religion+degree+country+age+gender, data = WVS, Hess = TRUE)
summary(ordered_logit)
# load some required packages
library(ggplot2)
library(margins)
library(ISLR)
library(broom)
library(lmtest)
data(Wage)
data =read.csv("MichelinNY.csv")
l = glm(InMichelin ~ Service + Decor + Food + Price, data, family=binomial("logit"))
d1 <- tidy(coeftest(l))
d1$group <- "R default"
# logit^{-1} (X \beta )
invlogit = function(mX, vBeta) {
return(exp(mX %*% vBeta)/(1+ exp(mX %*% vBeta)) )
}
# log-likelihoood function
logLikelihoodLogit = function(vBeta, mX, vY) {
return( - sum(
vY * log(  invlogit(mX, vBeta) ) +
(1-vY)* log(1 - invlogit(mX, vBeta))
)
)
}
vY = as.matrix(data['InMichelin'])
mX = as.matrix(data.frame(`(Intercept)` = 1, data[c('Service','Decor', 'Food', 'Price')]))
# initial guesses
vBeta0 = rep(0, ncol(mX))
# optimize
# report every 1 minute
optimLogit <- optim(par = vBeta0,
fn = logLikelihoodLogit,
mX = mX,
vY = vY,
method = "BFGS",
hessian=TRUE,
control = list(maxit = 50000, trace = 2, REPORT = 1))
# construct output
coef = optimLogit$par  # coefficient
coef.sd = sqrt(diag(solve(optimLogit$hessian))) # standard error
tv  <- coef  / coef.sd # t-value
## pt is a student-t distribution
## the below line will be the correct way to calculate p-values if you are running linear regression
## but I don't remember whether logistic regression's test statistics follow student-t
d = data.frame(term = d1$term, "estimate" = coef,  "std.error" = coef.sd, "statistic" = tv,   check.names = FALSE)
d$group <- "MLE_by_hand"
print (d1)
print (d)
l = glm(health ~ wage + education + race, data = Wage, family=binomial("logit"))
summary(l)
AME <- margins(l)
AME
MEM <- margins(l, at = list(wage = mean(Wage$education), race = mean(Wage$race)))
table(Wage$race)
table(Wage$race, useNA = "always")
str(Wage$race)
mean(Wage$race)
##
MEM <- margins(l, at = list(wage = mean(Wage$education), race = mean(as.numeric(Wage$race))))
##
MEM <- margins(l, at = list(wage = mean(as.numeric(Wage$education)), race = mean(as.numeric(Wage$race))))
as.numeric(Wage$race))
margins(l)
mean(as.numeric(Wage$race)))
mean(as.numeric(Wage$race))
help("margins")
# Marginal effect at representive values
MER <- margins(l, at = list(wage = c(100,200), education = c("2. HS Grad", "3. Some College")))
MER
MEM <- margins(l, at = list(wage = mean(Wage$education), race = mean(Wage$race)))
cplot(l, "wage", what = "prediction", main = "Predicted probability")
## by default, holding all other to be the constant and vary by focal variable
cplot(l, "race", what = "prediction", main = "Predicted probability")
# use sjPlot
library(sjPlot)
plot_model(l, type = "pred", terms = c("wage", "education"), ci.lvl = NA )
l2 = glm(health ~ wage + education * race, data = Wage, family=binomial())
plot_model(l2, type = "pred", terms = c("wage", "education"))
ml <- read.dta("https://stats.idre.ucla.edu/stat/data/hsbdemo.dta")
# ml <- read.dta("https://stats.idre.ucla.edu/stat/data/hsbdemo.dta")
ml <- read.csv("hsbdemo.csv")
library(nnet)
multinomial <- multinom(prog ~ ses + write, data = ml)
summary(multinomial)
table(ml$prog)
\multinomial
multinomial
library(MASS)
library(carData)
data (WVS)
head(WVS)
table(WVS$poverty)
ordered_logit <- polr(poverty~religion+degree+country+age+gender, data = WVS, Hess = TRUE)
summary(ordered_logit)
# from the MASS package
ordered_logit <- polr(poverty~religion+degree+country+age+gender, data = WVS, Hess = TRUE)
summary(ordered_logit)
# from the MASS package
ordered_logit <- polr(poverty~religion+degree+country+age+gender, data = WVS)
summary(ordered_logit)
levels(WVS$poverty)
# ml <- read.dta("https://stats.idre.ucla.edu/stat/data/hsbdemo.dta")
ml <- read.csv("hsbdemo.csv")
head(ml)
table(ml$prog)
library(nnet)
multinomial <- multinom(prog ~ ses + write, data = ml)
summary(multinomial)
xf <- factor(x)
x = c("1", "2", "3")
xf <- factor(x)
xf
xc = as.numeric(x)
x = c("2", "3", "4")
xf <- factor(x)
x = c("2", "3", "4")
xf <- factor(x)
xc = as.numeric(x)
xy = as.numeric(xf) # what this will be? 1,2, 3
xy
xf
x = c("2", "3", "10")
xf <- factor(x)
xc = as.numeric(x)
# run as.numeric on a factor; the orders will be returned
xy = as.numeric(xf) # what this will be? 1,2, 3
xy
xf <- factor(x)
xf
# ml <- read.dta("https://stats.idre.ucla.edu/stat/data/hsbdemo.dta")
ml <- read.csv("hsbdemo.csv")
# character (unordered categorical)
# factor (ordered categorical) ## use levels() to get the orders of factor variable
# numeric
str(ml)
x = c("2", "3", "10")
xf <- factor(x)
sxf
xf
as.numeric(as.character(xf))
xf
l = glm(health ~ wage + education + race, data = Wage, family=binomial("logit"))
summary(l)
AME <- margins(l)
AME
AME
MEM <- margins(l, at = list(wage = mean(Wage$education), race = mean(Wage$race)))
MER <- margins(l, at = list(wage = c(100,200), education = c("2. HS Grad", "3. Some College")))
MER
cplot(l, "wage", what = "prediction", main = "Predicted probability")
l2 = glm(health ~ wage + education * race, data = Wage, family=binomial())
plot_model(l2, type = "pred", terms = c("wage", "education"))
help("glm.convert")
help(glm)
